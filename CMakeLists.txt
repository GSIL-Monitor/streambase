# -----------------------------------------------------------------------------
# CMake build script for StreamBase.
# -----------------------------------------------------------------------------

# BUILD_LIB_TYPE  : STATIC/SHARED/BOTH, build STATIC/SHARED or BOTH, default BOTH
# COMPILER_PATH   : Compiler root path
# COMPILER_PREFIX : Compiler prefix
# TARGET_ARCH     : ppc/ppc64/arm/x86_64/i386/ia64
# P_PROFILE       : unittest
# WITH_TEST       : ON/OFF

PROJECT(StreamBase)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0)

ENABLE_LANGUAGE(C)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

IF(NOT TARGET_ARCH)
	SET(TARGET_ARCH "x86_64")
ENDIF()

# Append our module directory to CMake
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

INCLUDE(build_utils)

# OS
IF(CMAKE_SYSTEM MATCHES "Linux")
    INCLUDE(linux.os)
ENDIF(CMAKE_SYSTEM MATCHES "Linux")


IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    SET(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Set debug library postfix" FORCE)
ELSE()
    SET(CMAKE_DEBUG_POSTFIX "" CACHE STRING "Set debug library postfix" FORCE)
ENDIF()


# Set COMMON FLAGS
SET(COMMON_CFLAGS "-g -D_OB_VERSION=400")
SET(COMMON_CFLAGS "${COMMON_CFLAGS} -DCOMPATIBLE -D__USE_LARGEFILE64 -D_FILE_OFFSET_BITS=64")
SET(COMMON_CFLAGS "${COMMON_CFLAGS} -D_LARGE_FILE -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE")
SET(COMMON_CFLAGS "${COMMON_CFLAGS} -DNDEBUG -finline-functions -fno-strict-aliasing -Werror")
SET(COMMON_CFLAGS "${COMMON_CFLAGS} -Wall -fPIC")

SET(COMMON_CXXFLAGS "-g -D_OB_VERSION=400")
SET(COMMON_CXXFLAGS "${COMMON_CXXFLAGS} -D_NO_EXCEPTION -finline-functions -D__STDC_LIMIT_MACROS")
SET(COMMON_CXXFLAGS "${COMMON_CXXFLAGS} -D__STDC_CONSTANT_MACROS -DNDEBUG -Wall -Werror -Wextra")
SET(COMMON_CXXFLAGS "${COMMON_CXXFLAGS} -Wunused-parameter -Wformat -fno-strict-aliasing -Wconversion")
SET(COMMON_CXXFLAGS "${COMMON_CXXFLAGS} -Wno-deprecated -D__USE_LARGEFILE64 -D_FILE_OFFSET_BITS=64")
SET(COMMON_CXXFLAGS "${COMMON_CXXFLAGS} -D_LARGE_FILE -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE")
SET(COMMON_CXXFLAGS "${COMMON_CXXFLAGS} -Wno-ignored-qualifiers -fPIC")

# Set COMMON DEFINES
ADD_DEFINITIONS(-DPACKAGE_NAME="StreamBase" -DPACKAGE_TARNAME="streambase")
ADD_DEFINITIONS(-DPACKAGE_VERSION="0.0.0.1" -DPACKAGE_STRING="streambase 0.0.0.1")
ADD_DEFINITIONS(-DPACKAGE_BUGREPORT="311155@qq.com" -DPACKAGE_URL="https://github.com/mrunix/streambase")
ADD_DEFINITIONS(-DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1)
ADD_DEFINITIONS(-DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1)
ADD_DEFINITIONS(-DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1)
ADD_DEFINITIONS(-DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DPACKAGE="streambase")
ADD_DEFINITIONS(-DVERSION="0.0.0.1" -DRELEASEID="")

# Set local include path
INCLUDE_DIRECTORIES(
	${PROJECT_SOURCE_DIR}/src
	${PROJECT_SOURCE_DIR}/src/common
	# include libeasy header
	${PROJECT_SOURCE_DIR}/external/libeasy/include/easy
	# include libtbsys header
	${PROJECT_SOURCE_DIR}/external/tb-common-utils/tbsys/src
	# include libtbnet header
	${PROJECT_SOURCE_DIR}/external/tb-common-utils/tbnet/src
)

SET(JAVA_HOME_PATH "$ENV{JAVA_HOME}")
IF(x${JAVA_HOME_PATH} STREQUAL "x")
	MESSAGE(FATAL_ERROR "Set JAVA_HOME environment")
ENDIF()


IF(WITH_TEST)
	INCLUDE_DIRECTORIES(
		# include testing header
		external/testing/gtest
		external/testing/gtest/include 
		external/testing/gmock
		external/testing/gmock/include
	)
ENDIF()

ADD_SUBDIRECTORY(external)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(tools)

IF(WITH_TEST)
	#ADD_SUBDIRECTORY(tests)
ENDIF()

IF(WITH_PROFILE)
	INCLUDE(CodeCoverage)
ENDIF()

MESSAGE(STATUS "CMake ${CMAKE_VERSION} successfully configured ${PROJECT_NAME} using ${CMAKE_GENERATOR} generator")
MESSAGE(STATUS "")
MESSAGE(STATUS "CMAKE_C_COMPILER_ID            : ${CMAKE_C_COMPILER_ID}")
MESSAGE(STATUS "CMAKE_BUILD_TYPE               : ${CMAKE_BUILD_TYPE}")
MESSAGE(STATUS "CMAKE_C_FLAGS                  : ${CMAKE_C_FLAGS}")
MESSAGE(STATUS "CMAKE_C_FLAGS_DEBUG            : ${CMAKE_C_FLAGS_DEBUG}")
MESSAGE(STATUS "CMAKE_C_FLAGS_RELEASE          : ${CMAKE_C_FLAGS_RELEASE}")
MESSAGE(STATUS "CMAKE_C_FLAGS_RELWITHDEBINFO   : ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS                : ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS_DEBUG          : ${CMAKE_CXX_FLAGS_DEBUG}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS_RELEASE        : ${CMAKE_CXX_FLAGS_RELEASE}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS_RELWITHDEBINFO : ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
MESSAGE(STATUS "CMAKE_SHARED_LINKER_FLAGS      : ${CMAKE_SHARED_LINKER_FLAGS}" )
MESSAGE(STATUS "CMAKE_MODULE_LINKER_FLAGS      : ${CMAKE_MODULE_LINKER_FLAGS}" )
MESSAGE(STATUS "CMAKE_EXE_LINKER_FLAGS         : ${CMAKE_EXE_LINKER_FLAGS}" )
MESSAGE(STATUS "")
MESSAGE(STATUS "TARGET_ARCH                    : ${TARGET_ARCH}")
MESSAGE(STATUS "")
MESSAGE(STATUS "CMAKE_C_COMPILER               : ${CMAKE_C_COMPILER}")
MESSAGE(STATUS "CMAKE_CXX_COMPILER             : ${CMAKE_CXX_COMPILER}")

MESSAGE(STATUS "")

